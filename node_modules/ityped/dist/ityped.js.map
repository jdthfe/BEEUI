{"version":3,"sources":["../src/ityped.js"],"names":["root","factory","define","amd","exports","module","init","ityped","global","forEach","a","b","c","d","e","length","f","g","h","j","call","async","selectedElement","props","cursor","document","createElement","classList","add","textContent","setProps","config","strings","typeSpeed","backSpeed","backDelay","startDelay","showCursor","loop","undefined","insertAdjacentElement","cursorChar","Promise","resolve","element","querySelector","then","properties","loopingOnWords","words","word","index","arr","time","done","len","iterateWords","setTimeout","increment","reject","i","count","wordIndex","appendWord","charAt","innerHTML","wordsLengthArray","decrement","iterateInsideDecrement","iteratedI","substring","lengthWords","onFinished"],"mappings":"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","file":"ityped.js","sourcesContent":["/**\n * @name ityped\n * @description Dead simple Animated Typing with no dependencies\n * @author Luis VinÃ­cius\n * @email luis@uilabs.me\n */;\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = {\n      init: factory.init\n    }\n  } else {\n    root.ityped = factory;\n  }\n}(this, function (global) {\n  /**\n   * async foreach\n   * https://www.npmjs.com/package/async-foreach\n   */\n    const forEach = function (a, b, c) {\n      var d = -1,\n        e = a.length >>> 0;\n      (function f(g) {\n        var h,\n          j = g === !1;\n        do\n          ++d;\n        while (!(d in a) && d !== e);\n        if (j || d === e) {\n          c && c(!j, a);\n          return\n        }\n        g = b.call({\n          async: function () {\n            return h = !0,\n            f\n          }\n        }, a[d], d, a),\n        h || f(g)\n      })();\n    };\n\n\n  /**\n   * el is the element\n   */\n  let selectedElement,\n    props,\n    /**\n    * creating the cursor\n    */\n    cursor = document.createElement('span');\n  cursor\n    .classList\n    .add('ityped-cursor');\n  cursor.textContent = '|';\n\n  /**\n   * @name setProps\n   * @description Set the ityped properties configuration\n   * @param {Object} config The configuration properties\n   * @return {Promise}\n   */\n  function setProps ( config ) {\n    let props = config;\n    props.strings    = config.strings    || ['Put you string here...', 'and Enjoy!']\n    props.typeSpeed  = config.typeSpeed  || 100;\n    props.backSpeed  = config.backSpeed  || 50;\n    props.backDelay  = config.backDelay  || 500;\n    props.startDelay = config.startDelay || 500;\n    props.showCursor = config.showCursor;\n    props.loop       = config.loop       || false;\n\n    if (props.showCursor === undefined) props.showCursor = true;\n    if (props.showCursor) selectedElement.insertAdjacentElement('afterend', cursor);\n    if (props.cursorChar !== undefined) cursor.textContent = props.cursorChar;\n\n    return Promise.resolve(props);\n  }\n  /**\n   * @name init\n   * @param {String} element The element that will receive the strings\n   * @param {Object} config The initial configuration\n   */\n  function init(element, config) {\n    selectedElement = document.querySelector(element);\n    setProps(config).then(function(properties){\n      props = properties;\n      loopingOnWords(props.strings);\n    })\n  }\n\n  /**\n   * @name loopingOnWords\n   * @description Loop on each string passed\n   * @param {Array} words The array that contain the words\n   */\n  function loopingOnWords(words) {\n    forEach(words, function (word, index, arr) {\n      let time = (props.typeSpeed * word.length - 1);\n      /**\n       * set the correct time\n       * with the differences of type and back\n       * speed\n       */\n      if (props.backSpeed < props.typeSpeed) {\n        time -= (props.typeSpeed - props.backSpeed) * word.length;\n      } else if (props.backSpeed > props.typeSpeed) {\n        time += (props.backSpeed - props.typeSpeed) * word.length;\n      }\n      let done = this.async();\n      let len = words.length;\n      iterateWords(selectedElement, word, index, len).then(function () {\n        setTimeout(function () {\n          done();\n        }, time)\n      })\n    }, function () {\n      if (props.loop) {\n        loopingOnWords(words);\n      }\n    });\n  }\n  /**\n   * @name increment\n   * @description Increment each letter and append it on element\n   * @param {Element} selectedElement The Element that will receive the letters\n   * @param {String} word The string that will be looped to\n   * get each letter\n   * @return {Promise}\n   */\n  function increment(selectedElement, word) {\n    return new Promise(function (resolve, reject) {\n      for (let i = 0; i < word.length; i++) {\n        count = 0;\n        let wordIndex = i;\n        let len = word.length;\n        setTimeout(function (i) {\n          appendWord(selectedElement, word.charAt(wordIndex));\n          count++;\n          if (count === len - 1) {\n            resolve();\n          }\n        }, props.typeSpeed * i);\n      }\n    })\n  }\n  /**\n   * @name appendWord\n   * @description Append each letter on Element\n   * @param {Element} selectedElement The Element that will receive the letter\n   * @param {String} word The string that will be appended\n   */\n  function appendWord(selectedElement, word) {\n    selectedElement.innerHTML += word;\n  }\n\n  /**\n   * @name iterateWords\n   * @description Iterate on each word, incrementing and decrementing\n   * @param {Element} selectedElement The Element that will receive the letters of word\n   * @param {String} word The string that is the word\n   * @param {Integer} index The index position of the words Array\n   * @param {Integer} wordsLengthArray The length of words Array\n   * @return {Promise}\n   */\n  function iterateWords(selectedElement, word, index, wordsLengthArray) {\n    return new Promise(function (resolve, reject) {\n      increment(selectedElement, word)\n        .then(function () {\n          setTimeout(function () {\n            decrement(selectedElement, word, index, wordsLengthArray)\n              .then(function () {\n                setTimeout(function(){\n                  resolve();\n                }, props.startDelay)\n              });\n          }, props.backDelay)\n        });\n    });\n  }\n  /**\n   * @name iterateInsideDecrement\n   * @description Iterate on each word, inside the decrement function for decrement the word\n   * @param {Element} selectedElement The Element that will receive the letters of word\n   * @param {String} word The string that is the word\n   * @param {Integer} len The length of words Array\n   * @param {Promise} resolve The Promise.resolve method that will be trigerred when\n   * the decrement iteration are finished\n   * @return {Promise}\n   */\n  function iterateInsideDecrement(selectedElement, word, len, resolve) {\n    for (let i = len; i > 0; i--) {\n      let iteratedI = i, count = len;\n      setTimeout(function (i) {\n        selectedElement.innerHTML = word.substring(0, len - iteratedI)\n        count--;\n        if (iteratedI === 1) {\n          resolve();\n        }\n      }, props.backSpeed * i);\n    }\n  }\n\n  /**\n   * @name decrement\n   * @description decrement the word in the correct case\n   * @param {Element} selectedElement The Element that will receive the letters of word\n   * @param {String} word The string that is the word\n   * @param {Integer} index The index of the Array that contain the word\n   * @param {Integer} lengthWords The length of words Array\n   */\n  function decrement(selectedElement, word, index, lengthWords) {\n    return new Promise(function (resolve, reject) {\n      let len = word.length;\n      // if is the last letter and the last word and no loop\n      if (index + 1 === lengthWords) {\n        if (!props.loop) {\n        // when the last word\n          if (props.onFinished !== undefined && typeof props.onFinished === \"function\"){\n              props.onFinished();\n          }\n          selectedElement.innerHTML = word;\n        }\n        else if (props.loop) {\n          iterateInsideDecrement(selectedElement, word, len, resolve);\n        }\n      } else if (index + 1 !== lengthWords) {\n        iterateInsideDecrement(selectedElement, word, len, resolve);\n      }\n    })\n  }\n\n  /**\n   * Return the init function\n   */\n  return {init}\n}(this)));"]}